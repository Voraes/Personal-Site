---
---

<section class="hero">
	<canvas id="particles"></canvas>
	<div class="content">
		<div class="badge">Available for hire</div>
		<h1>Hi, I'm <span class="typing-text"></span></h1>
		<p class="title">Software Engineer</p>
		<p class="subtitle">
			Building exceptional digital experiences with modern web technologies
		</p>
		<div class="cta-buttons">
			<a href="#projects" class="primary-button">View Projects</a>
			<a href="#contact" class="secondary-button">Get in Touch</a>
		</div>
	</div>
</section>

<script>
	const text = "Victor Mendes";
	const typingText = document.querySelector('.typing-text');
	let i = 0;

	function type() {
		if (i < text.length) {
			typingText.textContent += text.charAt(i);
			i++;
			setTimeout(type, 100);
		}
	}

	// Start typing animation when the page loads
	window.addEventListener('load', () => {
		typingText.textContent = '';
		i = 0;
		setTimeout(type, 500);
	});

	// Particle animation
	const canvas = document.getElementById('particles') as HTMLCanvasElement;
	const ctx = canvas.getContext('2d')!;

	// Set canvas size
	function resizeCanvas() {
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
	}

	window.addEventListener('resize', resizeCanvas);
	resizeCanvas();

	// Particle class
	class Particle {
		x: number;
		y: number;
		size: number;
		speedX: number;
		speedY: number;
		opacity: number;

		constructor() {
			this.x = Math.random() * canvas.width;
			this.y = Math.random() * canvas.height;
			this.size = Math.random() * 2;
			this.speedX = (Math.random() - 0.5) * 0.5;
			this.speedY = (Math.random() - 0.5) * 0.5;
			this.opacity = Math.random() * 0.5;
		}

		update() {
			this.x += this.speedX;
			this.y += this.speedY;

			if (this.x > canvas.width) this.x = 0;
			if (this.x < 0) this.x = canvas.width;
			if (this.y > canvas.height) this.y = 0;
			if (this.y < 0) this.y = canvas.height;
		}

		draw() {
			ctx.beginPath();
			ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
			ctx.fillStyle = `rgba(var(--accent), ${this.opacity})`;
			ctx.fill();
		}
	}

	// Create particle array
	const particleCount = 100;
	const particles: Particle[] = [];

	for (let i = 0; i < particleCount; i++) {
		particles.push(new Particle());
	}

	// Animation loop
	function animate() {
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		
		particles.forEach(particle => {
			particle.update();
			particle.draw();
		});

		// Draw connections
		particles.forEach(particle1 => {
			particles.forEach(particle2 => {
				const dx = particle1.x - particle2.x;
				const dy = particle1.y - particle2.y;
				const distance = Math.sqrt(dx * dx + dy * dy);

				if (distance < 100) {
					ctx.beginPath();
					ctx.strokeStyle = `rgba(var(--accent), ${0.1 * (1 - distance / 100)})`;
					ctx.lineWidth = 0.5;
					ctx.moveTo(particle1.x, particle1.y);
					ctx.lineTo(particle2.x, particle2.y);
					ctx.stroke();
				}
			});
		});

		requestAnimationFrame(animate);
	}

	animate();
</script>

<style>
	.hero {
		min-height: 90vh;
		display: flex;
		align-items: center;
		justify-content: center;
		text-align: center;
		padding: 2rem;
		position: relative;
		overflow: hidden;
	}

	canvas {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		pointer-events: none;
		z-index: 0;
	}

	.content {
		max-width: 800px;
		position: relative;
		z-index: 1;
	}

	.badge {
		background: rgba(var(--accent), 0.1);
		color: rgb(var(--accent-light));
		padding: 0.5rem 1rem;
		border-radius: 20px;
		font-size: 0.875rem;
		font-weight: 500;
		display: inline-block;
		margin-bottom: 2rem;
		border: 2px solid rgba(var(--accent), 0.2);
	}

	h1 {
		font-size: 4.5rem;
		font-weight: 700;
		margin-bottom: 1rem;
		line-height: 1.1;
	}

	.typing-text {
		background: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 150%;
		position: relative;
	}

	.typing-text::after {
		content: '|';
		margin-left: 2px;
		opacity: 1;
		animation: blink 1s infinite;
	}

	@keyframes blink {
		0%, 100% { opacity: 1; }
		50% { opacity: 0; }
	}

	.title {
		font-size: 2rem;
		color: rgb(var(--accent-light));
		margin-bottom: 1rem;
		font-weight: 600;
	}

	.subtitle {
		font-size: 1.25rem;
		color: var(--text-secondary);
		margin-bottom: 2.5rem;
		max-width: 600px;
		margin-left: auto;
		margin-right: auto;
	}

	.cta-buttons {
		display: flex;
		gap: 1rem;
		justify-content: center;
	}

	.primary-button, .secondary-button {
		padding: 1rem 2rem;
		border-radius: 12px;
		text-decoration: none;
		font-weight: 500;
		transition: all 0.3s ease;
		font-size: 1.125rem;
	}

	.primary-button {
		background: rgb(var(--accent));
		color: white;
	}

	.secondary-button {
		background: var(--secondary);
		color: var(--foreground);
		border: 2px solid var(--border);
	}

	.primary-button:hover {
		transform: translateY(-2px);
		background: rgb(var(--accent-light));
	}

	.secondary-button:hover {
		transform: translateY(-2px);
		border-color: rgb(var(--accent));
	}

	@media (max-width: 768px) {
		h1 {
			font-size: 3rem;
		}

		.title {
			font-size: 1.5rem;
		}

		.subtitle {
			font-size: 1rem;
		}

		.cta-buttons {
			flex-direction: column;
		}

		.primary-button, .secondary-button {
			width: 100%;
			text-align: center;
		}
	}
</style>